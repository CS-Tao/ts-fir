import {
  零,
  一,
  三,
  五,
  九,
  整数,
  正数,
  减一,
  加一,
  相等,
  大于,
  小于等于,
  正数键值对,
  渲染数字,
  不可能,
  是,
  否,
  空,
  二,
} from "./number";
import {
  棋子坐标,
  构造棋子坐标,
  棋子纵坐标,
  棋子横坐标,
  最小纵坐标,
  最小横坐标,
  错误,
} from "./base";

export type 黑色符号 = "🔴";
export type 白色符号 = "🟢";
export type 空符号 = "➕";
export type 元符号 = "💲";

export type 黑色 = "黑";
export type 白色 = "白";

export type 颜色 = 黑色 | 白色;

export type 棋子<T extends 颜色> = {
  符号: T extends 黑色 ? 黑色符号 : 白色符号;
};

export type 棋盘格 = {
  内容: 棋子<颜色> | 空;
  上一格: 棋盘格 | 空;
  下一格: 棋盘格 | 空;
};

export type 构造棋盘格参数 = {
  内容: 棋盘格["内容"];
};

export type 构造棋盘格<
  T extends 构造棋盘格参数,
  P extends 棋盘格["上一格"],
  K extends 棋盘格["下一格"]
> = {
  内容: T["内容"];
  上一格: P;
  下一格: K;
};

export type 从内容构造棋盘格<
  T extends 棋盘格["内容"],
  P extends 棋盘格["上一格"],
  K extends 棋盘格["下一格"]
> = {
  内容: T;
  上一格: P;
  下一格: K;
};

export type 给棋盘格添加下一格<T extends 棋盘格, P extends 棋盘格["下一格"]> = {
  内容: T["内容"];
  上一格: T["上一格"];
  下一格: P;
};

export type 棋盘行 = {
  内容: 棋盘格;
  上一行: 棋盘行 | 空;
  下一行: 棋盘行 | 空;
};

export type 构造棋盘行参数 = {
  内容: 构造棋盘格参数;
};

export type 构造棋盘行<
  T extends 构造棋盘行参数,
  P extends 棋盘行["上一行"],
  K extends 棋盘行["上一行"]
> = {
  内容: T["内容"];
  上一行: P;
  下一行: K;
};

export type 给棋盘行添加下一行<T extends 棋盘行, P extends 棋盘行["下一行"]> = {
  内容: T["内容"];
  上一行: T["上一行"];
  下一行: P;
};

export type 从内容构造棋盘行<
  T extends 棋盘行["内容"],
  P extends 棋盘行["上一行"],
  K extends 棋盘行["下一行"]
> = {
  内容: T;
  上一行: P;
  下一行: K;
};

export type 棋盘 = {
  内容: 棋盘行;
  待落颜色: 颜色;
  结果: 空 | 颜色;
  使用双向链表: 是 | 否;
};

export type 构造棋盘参数 = {
  内容: 棋盘行;
};

export type 构造棋盘<
  T extends 构造棋盘参数,
  P extends 颜色,
  K extends 空 | 颜色,
  M extends 是 | 否
> = {
  内容: T["内容"];
  待落颜色: P;
  结果: K;
  使用双向链表: M;
};

/**
 * 在链表中获取指定行号的一行
 */
export type 根据链表获取棋盘指定行<
  行链表 extends 棋盘行 | 空,
  行号 extends 棋子纵坐标 | 零
> = 行链表 extends 棋盘行
  ? 是 extends 相等<行号, 最小纵坐标>
    ? 行链表
    : 根据链表获取棋盘指定行<行链表["下一行"], 减一<行号>>
  : 不可能;

export type 获取棋盘指定行<
  某棋盘 extends 棋盘,
  行号 extends 棋子纵坐标
> = 根据链表获取棋盘指定行<某棋盘["内容"], 行号>;

export type 根据棋盘内容获取棋盘指定行<
  某棋盘内容 extends 棋盘["内容"],
  行号 extends 棋子纵坐标
> = 根据链表获取棋盘指定行<某棋盘内容, 行号>;

/**
 * 在链表中获取指定列号的一个单元格
 */
export type 根据链表获取棋盘某行的指定单元格<
  单元链表 extends 棋盘格 | 空,
  列号 extends 棋子横坐标 | 零
> = 单元链表 extends 棋盘格
  ? 是 extends 相等<列号, 最小横坐标>
    ? 单元链表
    : 根据链表获取棋盘某行的指定单元格<单元链表["下一格"], 减一<列号>>
  : 不可能;

export type 获取某行的指定单元格<
  某行 extends 棋盘行,
  列号 extends 棋子横坐标
> = 根据链表获取棋盘某行的指定单元格<某行["内容"], 列号>;

/**
 * 获取单元格内容
 */
export type 获取某个单元内容<某单元 extends 棋盘格> = 某单元["内容"];

/**
 * 获取棋盘某位置的棋子
 */
export type 获取棋盘某位置的单元<
  某棋盘 extends 棋盘,
  某位置 extends 棋子坐标
> = 获取棋盘指定行<某棋盘, 某位置["纵"]> extends infer 某行
  ? 某行 extends 棋盘行
    ? 获取某行的指定单元格<某行, 某位置["横"]>
    : 不可能
  : 不可能;

export type 根据棋盘内容获取棋盘某位置的单元<
  某棋盘内容 extends 棋盘["内容"],
  某位置 extends 棋子坐标
> = 根据棋盘内容获取棋盘指定行<某棋盘内容, 某位置["纵"]> extends infer 某行
  ? 某行 extends 棋盘行
    ? 获取某行的指定单元格<某行, 某位置["横"]>
    : 不可能
  : 不可能;

export type 替换棋盘某行<
  某棋盘 extends 棋盘,
  行号 extends 棋子坐标["纵"],
  新行 extends 棋盘行,
  最大纵坐标 extends 棋子纵坐标,
  迭代次数 extends 整数 = 最小纵坐标
> = 迭代次数 extends infer 校验后的迭代数
  ? 校验后的迭代数 extends 棋子坐标["纵"]
    ? 小于等于<迭代次数, 最大纵坐标> extends 是
      ? 获取棋盘指定行<某棋盘, 校验后的迭代数> extends infer 当前行
        ? 当前行 extends 棋盘行
          ? 相等<迭代次数, 行号> extends 是
            ? 构造棋盘行<
                { 内容: 新行["内容"] },
                当前行["上一行"],
                当前行["下一行"]
              >
            : 构造棋盘行<
                { 内容: 当前行["内容"] },
                当前行["上一行"],
                替换棋盘某行<
                  某棋盘,
                  行号,
                  新行,
                  最大纵坐标,
                  加一<校验后的迭代数>
                >
              >
          : 不可能
        : 不可能
      : 不可能
    : 不可能
  : 不可能;

export type 替换棋盘行某格<
  某行 extends 棋盘行,
  列号 extends 棋子坐标["横"],
  某棋子 extends 棋子<颜色>,
  最大横坐标 extends 棋子横坐标,
  迭代次数 extends 整数 = 最小横坐标
> = 迭代次数 extends infer 校验后的迭代数
  ? 校验后的迭代数 extends 棋子坐标["横"]
    ? 小于等于<迭代次数, 最大横坐标> extends 是
      ? 获取某行的指定单元格<某行, 校验后的迭代数> extends infer 当前格
        ? 当前格 extends 棋盘格
          ? 相等<迭代次数, 列号> extends 是
            ? 从内容构造棋盘格<某棋子, 当前格["上一格"], 当前格["下一格"]>
            : 从内容构造棋盘格<
                当前格["内容"],
                当前格["上一格"],
                替换棋盘行某格<
                  某行,
                  列号,
                  某棋子,
                  最大横坐标,
                  加一<校验后的迭代数>
                >
              >
          : 不可能
        : 不可能
      : 不可能
    : 不可能
  : 不可能;

export type 渲染空格<
  纵坐标 extends 棋子纵坐标,
  横坐标 extends 棋子横坐标,
  元坐标 extends 棋子坐标
> = 构造棋子坐标<横坐标, 纵坐标> extends 元坐标 ? 元符号 : 空符号;

export type 渲染格<
  某格 extends 棋盘格,
  纵坐标 extends 棋子纵坐标,
  横坐标 extends 棋子横坐标,
  元坐标 extends 棋子坐标
> = 某格["内容"] extends infer 待渲染棋子
  ? 待渲染棋子 extends 棋子<颜色>
    ? 待渲染棋子 extends 棋子<黑色>
      ? 棋子<黑色>["符号"]
      : 棋子<白色>["符号"]
    : 待渲染棋子 extends 空
    ? 渲染空格<横坐标, 纵坐标, 元坐标>
    : 不可能
  : 不可能;

export type 拼接单元格<
  迭代结果 extends string,
  当前结果 extends string
> = 迭代结果 extends "" ? 当前结果 : `${迭代结果} ${当前结果}`;

export type 渲染行内容<
  某格 extends 棋盘格 | 空,
  元坐标 extends 棋子坐标,
  纵坐标 extends 棋子纵坐标,
  迭代结果 extends string = "",
  迭代号 extends 整数 = 最小横坐标
> = 某格 extends infer 当前格
  ? 迭代号 extends infer 横坐标
    ? 当前格 extends 棋盘格
      ? 横坐标 extends 棋子横坐标
        ? 渲染行内容<
            当前格["下一格"],
            元坐标,
            纵坐标,
            拼接单元格<迭代结果, 渲染格<当前格, 纵坐标, 横坐标, 元坐标>>,
            加一<迭代号>
          >
        : 迭代结果
      : 当前格 extends 空
      ? 迭代结果
      : 不可能
    : 不可能
  : 不可能;

export type 获得最大行<
  棋盘内容 extends 棋盘["内容"],
  迭代号 extends 整数 = 一
> = 棋盘内容["下一行"] extends 棋盘行
  ? 获得最大行<棋盘内容["下一行"], 加一<迭代号>>
  : 迭代号;

export type 获得最大列<
  棋盘行内容 extends 棋盘["内容"]["内容"],
  迭代号 extends 整数 = 一
> = 棋盘行内容["下一格"] extends 棋盘格
  ? 获得最大列<棋盘行内容["下一格"], 加一<迭代号>>
  : 迭代号;

type 获胜方向 = "横行" | "纵向" | "正斜" | "反斜";

type 根据方向获取下一坐标<
  当前坐标 extends 棋子坐标,
  方向 extends 获胜方向
> = 方向 extends "横行"
  ? 构造棋子坐标<加一<当前坐标["横"]>, 当前坐标["纵"]>
  : 方向 extends "纵向"
  ? 构造棋子坐标<当前坐标["横"], 加一<当前坐标["纵"]>>
  : 方向 extends "正斜"
  ? 构造棋子坐标<加一<当前坐标["横"]>, 加一<当前坐标["纵"]>>
  : 方向 extends "反斜"
  ? 构造棋子坐标<减一<当前坐标["横"]>, 加一<当前坐标["纵"]>>
  : 不可能;

type 某向是否胜利<
  方向 extends 获胜方向,
  某棋盘内容 extends 棋盘["内容"],
  某坐标 extends 棋子坐标 | 空,
  某棋盘格 extends 棋盘格 | 空,
  某颜色 extends 颜色,
  胜利所需个数 extends 三 | 五,
  迭代次数 extends 正数 = 一
> = 某棋盘格 extends 棋盘格
  ? 某坐标 extends 棋子坐标
    ? 某棋盘格["内容"] extends 棋子<某颜色>
      ? 是 extends 相等<迭代次数, 胜利所需个数>
        ? 是
        : 根据方向获取下一坐标<某坐标, 方向> extends infer 下一坐标
        ? 某向是否胜利<
            方向,
            某棋盘内容,
            下一坐标 extends 棋子坐标 ? 下一坐标 : 空,
            下一坐标 extends 棋子坐标
              ? 根据棋盘内容获取棋盘某位置的单元<某棋盘内容, 下一坐标>
              : 空,
            某颜色,
            胜利所需个数,
            加一<迭代次数>
          >
        : 不可能
      : 否
    : 否
  : 否;

type 是否胜利<
  某方向 extends 获胜方向,
  某棋盘内容 extends 棋盘["内容"],
  某坐标 extends 棋子坐标,
  某棋盘格 extends 棋盘格,
  某颜色 extends 颜色,
  胜利所需个数 extends 三 | 五
> = 某方向 extends 获胜方向
  ? 某向是否胜利<某方向, 某棋盘内容, 某坐标, 某棋盘格, 某颜色, 胜利所需个数>
  : 不可能;

type 获得胜利所需个数<某棋盘内容 extends 棋盘["内容"]> = 获得最大列<
  某棋盘内容["内容"]
> extends infer 最大列
  ? 最大列 extends 正数
    ? 最大列 extends 九
      ? 五
      : 最大列 extends 三
      ? 三
      : 错误<`暂不支持「${渲染数字<最大列>}」列的棋盘`>
    : 不可能
  : 不可能;

type 计算单元格结果<
  某棋盘内容 extends 棋盘["内容"],
  某坐标 extends 棋子坐标,
  某棋盘格 extends 棋盘格,
  某颜色 extends 颜色
> = 获得胜利所需个数<某棋盘内容> extends infer 胜利所需个数
  ? 胜利所需个数 extends 三 | 五
    ? 是否胜利<获胜方向, 某棋盘内容, 某坐标, 某棋盘格, 某颜色, 胜利所需个数>
    : 不可能
  : 不可能;

type 获得下一个坐标<
  当前坐标 extends 棋子坐标,
  当前棋盘行 extends 棋盘行,
  当前棋盘格 extends 棋盘格
> = 当前棋盘格["下一格"] extends 棋盘格
  ? 构造棋子坐标<加一<当前坐标["横"]>, 当前坐标["纵"]>
  : 当前棋盘行["下一行"] extends 棋盘行
  ? 构造棋子坐标<当前坐标["横"], 加一<当前坐标["纵"]>>
  : 空;

type 计算结果<
  某棋盘内容 extends 棋盘["内容"],
  当前坐标 extends 棋子坐标 = 构造棋子坐标<最小横坐标, 最小纵坐标>
> = 根据棋盘内容获取棋盘指定行<
  某棋盘内容,
  当前坐标["纵"]
> extends infer 当前棋盘行
  ? 当前棋盘行 extends 棋盘行
    ? 根据链表获取棋盘某行的指定单元格<
        当前棋盘行["内容"],
        当前坐标["横"]
      > extends infer 当前棋盘格
      ? 当前棋盘格 extends 棋盘格
        ? 当前棋盘格["内容"] extends 棋子<infer 某颜色>
          ? 某颜色 extends 颜色
            ? 计算单元格结果<
                某棋盘内容,
                当前坐标,
                当前棋盘格,
                某颜色
              > extends infer 当前单元格结果
              ? 是 extends 当前单元格结果
                ? 某颜色
                : 获得下一个坐标<
                    当前坐标,
                    当前棋盘行,
                    当前棋盘格
                  > extends infer 下一个坐标
                ? 下一个坐标 extends 棋子坐标
                  ? 计算结果<某棋盘内容, 下一个坐标>
                  : 不可能
                : 不可能
              : 不可能
            : 不可能
          : 不可能
        : 当前棋盘格 extends 空
        ? 空
        : 不可能
      : 不可能
    : 不可能
  : 不可能;

export type 实施落子<
  某棋盘 extends 棋盘,
  某坐标 extends 棋子坐标,
  某颜色 extends 颜色,
  最大行 extends 棋子纵坐标,
  最大列 extends 棋子横坐标
> = 获取棋盘某位置的单元<某棋盘, 某坐标> extends infer 当前格
  ? 当前格 extends 棋盘格
    ? 当前格["内容"] extends 空
      ? 获取棋盘指定行<某棋盘, 某坐标["纵"]> extends infer 当前行
        ? 当前行 extends 棋盘行
          ? 替换棋盘某行<
              某棋盘,
              某坐标["纵"],
              从内容构造棋盘行<
                替换棋盘行某格<当前行, 某坐标["横"], 棋子<某颜色>, 最大列>,
                当前行["上一行"],
                当前行["下一行"]
              >,
              最大行
            > extends infer 某棋盘内容
            ? 某棋盘内容 extends 棋盘["内容"]
              ? 构造棋盘<
                  {
                    内容: 某棋盘内容;
                  },
                  某棋盘["待落颜色"] extends "黑" ? "白" : "黑",
                  某棋盘["使用双向链表"] extends 是 ? 计算结果<某棋盘内容> : 空,
                  某棋盘["使用双向链表"]
                >
              : 不可能
            : 不可能
          : 不可能
        : 不可能
      : 错误<`当前位置「${渲染数字<某坐标["横"]>}, ${渲染数字<
          某坐标["纵"]
        >}」已有棋子「${当前格["内容"] extends 棋子<颜色>
          ? 当前格["内容"]["符号"]
          : ""}」`>
    : 不可能
  : 不可能;

export type 落子<
  某棋盘 extends 棋盘,
  某颜色 extends 颜色,
  横坐标字符串 extends keyof 正数键值对,
  纵坐标字符串 extends keyof 正数键值对
> = 构造棋子坐标<
  正数键值对[横坐标字符串],
  正数键值对[纵坐标字符串]
> extends infer 某坐标
  ? 某坐标 extends 棋子坐标
    ? 某棋盘["结果"] extends 空
      ? 某颜色 extends 某棋盘["待落颜色"]
        ? 获得最大行<某棋盘["内容"]> extends infer 最大行
          ? 最大行 extends 棋子纵坐标
            ? 获得最大列<某棋盘["内容"]["内容"]> extends infer 最大列
              ? 最大行 extends 棋子纵坐标
                ? 最大列 extends 棋子横坐标
                  ? 否 extends 大于<某坐标["纵"], 最大行>
                    ? 否 extends 大于<某坐标["横"], 最大列>
                      ? 实施落子<某棋盘, 某坐标, 某颜色, 最大行, 最大列>
                      : 错误<`横坐标「${横坐标字符串}」超出最大值「${渲染数字<最大列>}」`>
                    : 错误<`纵坐标「${纵坐标字符串}」超出最大值「${渲染数字<最大行>}」`>
                  : 不可能
                : 不可能
              : 不可能
            : 不可能
          : 不可能
        : 错误<`应该由「${某棋盘["待落颜色"]}-${某棋盘["待落颜色"] extends 黑色
            ? 黑色符号
            : 白色符号}」落子`>
      : 错误<`不能落子，「${某棋盘["结果"]}-${某棋盘["结果"] extends 黑色
          ? 黑色符号
          : 白色符号}」已获胜`>
    : 不可能
  : 不可能;

export type 初始棋盘格参数 = {
  内容: 空;
};

/**
 * @deprecated 容易达到递归次数限制
 */
export type 递归构造格子<
  上一格 extends 棋盘格 | 空,
  最大列 extends 整数
> = 从内容构造棋盘格<初始棋盘格参数["内容"], 上一格, 空> extends infer 当前格
  ? 当前格 extends 棋盘格
    ? 给棋盘格添加下一格<
        当前格,
        一 extends 最大列 ? 空 : 递归构造格子<当前格, 减一<最大列>>
      >
    : 不可能
  : 不可能;

/**
 * @deprecated 容易达到递归次数限制
 */
export type 递归构造指定棋盘行<
  上一行 extends 棋盘行 | 空,
  最大行 extends 整数,
  最大列 extends 整数
> = 从内容构造棋盘行<递归构造格子<空, 最大列>, 上一行, 空> extends infer 当前行
  ? 当前行 extends 棋盘行
    ? 给棋盘行添加下一行<
        当前行,
        一 extends 最大行
          ? 空
          : 递归构造指定棋盘行<当前行, 减一<最大行>, 最大列>
      >
    : 不可能
  : 不可能;

/**
 * @deprecated 容易达到递归次数限制
 */
export type 构造指定棋盘<最大行列 extends 整数> = 构造棋盘<
  {
    内容: 递归构造指定棋盘行<空, 最大行列, 三>;
  },
  "黑",
  空,
  相等<最大行列, 三>
>;
