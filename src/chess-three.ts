import { 正数键值对, 不可能, 空, 是 } from "./number";
import {
  构造棋盘格,
  初始棋盘格参数,
  棋盘行,
  构造棋盘,
  棋盘,
  获取棋盘指定行,
  渲染行内容,
  棋盘格,
  给棋盘格添加下一格,
  给棋盘行添加下一行,
  黑色,
  黑色符号,
  白色符号,
} from "./biz";

type 构造井字棋棋盘行<
  P extends 棋盘行["上一行"],
  K extends 棋盘行["下一行"]
> = 构造棋盘格<初始棋盘格参数, 空, 空> extends infer 第一格
  ? 第一格 extends 棋盘格
    ? 构造棋盘格<初始棋盘格参数, 第一格, 空> extends infer 第二格
      ? 第二格 extends 棋盘格
        ? 构造棋盘格<初始棋盘格参数, 第二格, 空> extends infer 第三格
          ? 第三格 extends 棋盘格
            ? {
                内容: 给棋盘格添加下一格<
                  第一格,
                  给棋盘格添加下一格<第二格, 给棋盘格添加下一格<第三格, 空>>
                >;
                上一行: P;
                下一行: K;
              }
            : 不可能
          : 不可能
        : 不可能
      : 不可能
    : 不可能
  : 不可能;

type 构造井字棋盘 = 构造井字棋棋盘行<空, 空> extends infer 第一行
  ? 第一行 extends 棋盘行
    ? 构造井字棋棋盘行<第一行, 空> extends infer 第二行
      ? 第二行 extends 棋盘行
        ? 构造井字棋棋盘行<第二行, 空> extends infer 第三行
          ? 第三行 extends 棋盘行
            ? 构造棋盘<
                {
                  内容: 给棋盘行添加下一行<
                    第一行,
                    给棋盘行添加下一行<第二行, 给棋盘行添加下一行<第三行, 空>>
                  >;
                },
                "黑",
                空,
                是
              >
            : 不可能
          : 不可能
        : 不可能
      : 不可能
    : 不可能
  : 不可能;

type 待落子 = "待落子";
type 获胜 = "获胜";

export type 渲染井字棋盘<某棋盘 extends 棋盘> = {
  [key in
    | "一"
    | "二"
    | "三"
    | (某棋盘["结果"] extends 空 ? 待落子 : 获胜)]: key extends infer 行
    ? 行 extends 待落子
      ? `${某棋盘["待落颜色"]}-${某棋盘["待落颜色"] extends 黑色
          ? 黑色符号
          : 白色符号}`
      : 行 extends 获胜
      ? `${某棋盘["结果"]}-${某棋盘["结果"] extends 黑色 ? 黑色符号 : 白色符号}`
      : 行 extends keyof 正数键值对
      ? 获取棋盘指定行<某棋盘, 正数键值对[行]> extends infer 某行
        ? 某行 extends 棋盘行
          ? `⎪ ${渲染行内容<某行["内容"], 不可能, 正数键值对[行]>} ⎪`
          : 不可能
        : 不可能
      : 不可能
    : 不可能;
};

export type 初始井字棋盘 = 构造井字棋盘;
